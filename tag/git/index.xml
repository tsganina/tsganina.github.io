<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Git | Academic</title>
    <link>https://example.com/tag/git/</link>
      <atom:link href="https://example.com/tag/git/index.xml" rel="self" type="application/rss+xml" />
    <description>Git</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><lastBuildDate>Sat, 18 Mar 2023 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://example.com/media/icon_hu0b7a4cb9992c9ac0e91bd28ffd38dd00_9727_512x512_fill_lanczos_center_3.png</url>
      <title>Git</title>
      <link>https://example.com/tag/git/</link>
    </image>
    
    <item>
      <title>Version control. Git.</title>
      <link>https://example.com/post/git/</link>
      <pubDate>Sat, 18 Mar 2023 00:00:00 +0000</pubDate>
      <guid>https://example.com/post/git/</guid>
      <description>&lt;h2 id=&#34;version-control-system-vcs&#34;&gt;Version Control System (VCS)&lt;/h2&gt;
&lt;p&gt;ðŸ¤— Are used when several people work on the same project.&lt;/p&gt;
&lt;p style=&#34;text-align: justify;&#34;&gt;Usually, the main project tree is stored in a local or remote repository, to which access is configured for project participants. When making changes to the project content, the version control system allows you to fix them, combine changes made by different project participants, roll back to any earlier version of the project, if required.&lt;/p&gt;
&lt;p style=&#34;text-align: justify;&#34;&gt;In classical version control systems, a centralized model is used, assuming a single repository for storing files. Most version control functions are performed by a special server. The project participant (user) receives the version of files he needs before starting work through certain commands. After making changes, the user places the new version in the repository. At the same time, previous versions are not deleted from the central repository and you can return to them at any time. The server can save not the full version of the modified files, but perform so-called delta compression â€” save only changes between successive versions, which reduces the amount of data stored.&lt;/p&gt;
&lt;p style=&#34;text-align: justify;&#34;&gt;Version control systems support the ability to track and resolve conflicts that may arise when several people work on a single file. You can merge (merge) changes made by different participants (automatically or manually), manually select the desired version, cancel the changes altogether or lock files for modification. Depending on the settings, the lock does not allow other users to get a working copy or prevents changing the working copy of the file by means of the OS file system, thus providing privileged access to only one user working with the file.&lt;/p&gt;
&lt;p style=&#34;text-align: justify;&#34;&gt;Version control systems can also provide additional, more flexible functionality. For example, they can support working with multiple versions of a single file, keeping a common history of changes up to the point of branching versions and their own change histories of each branch. In addition, information is usually available about which of the participants, when and what changes were made. Usually this kind of information is stored in the change log, access to which can be restricted.&lt;/p&gt;
&lt;p style=&#34;text-align: justify;&#34;&gt;Unlike the classical ones, in distributed version control systems, a central repository is not mandatory.
Among the classic VCS, the most famous are CVS, Subversion, and among the distributed ones â€” Git, Bazaar, Mercurial. The principles of their work are similar, they differ mainly in the syntax of the commands used in the work.&lt;/p&gt;
&lt;h2 id=&#34;examples-of-using-git&#34;&gt;Examples of using git&lt;/h2&gt;
&lt;ul style=&#34;text-align: justify;&#34;&gt;
&lt;li&gt;ðŸ’¬ The Git version control system is a set of command-line programs. They can be accessed from the terminal by entering the git command with various options.&lt;/li&gt;
&lt;/ul&gt;
&lt;ul style=&#34;text-align: justify;&#34;&gt;
&lt;li&gt;ðŸ’Œ Due to the fact that Git is a distributed version control system, a backup copy of the local storage can be made by simple copying or archiving.&lt;/li&gt;
&lt;/ul&gt;
&lt;p style=&#34;text-align: justify;&#34;&gt;For example, below is a description of the main commands of the git system.&lt;/p&gt;
&lt;h2 id=&#34;description-of-the-main-commands-of-the-git-system&#34;&gt;Description of the main commands of the git system&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Command&lt;/th&gt;
&lt;th&gt;Action&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;git init&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Creating the main repository tree&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;git pull&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Getting updates (changes) of the current tree from the central repository&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;git push&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Sending all changes made to the local tree to the central repository&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;git status&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;View the list of modified files in the current directory&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;git diff&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;View current changes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;git add . / git add &amp;lt;filename&amp;gt; / git rm &amp;lt;filename&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Saving current changes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;git commit / git commit -am &amp;quot;commit description&amp;quot;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Saving added changes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;git checkout -b_name&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Creating a new branch based on the current one&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;git checkout branch name&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Switching to some branch&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;git push origin_name&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Sending changes of a specific branch to the central repository&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;git merge --no-ff_name&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Merging a branch with the current tree&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;git branch -d branch_name&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Deleting a local branch already merged with the main tree&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;git branch -D branch_name&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Forced deletion of a local branch&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;git push origin :branch name&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Deleting a branch from the central repository&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;did-you-find-this-page-helpful-consider-sharing-it-&#34;&gt;Did you find this page helpful? Consider sharing it ðŸ™Œ&lt;/h3&gt;
</description>
    </item>
    
  </channel>
</rss>
